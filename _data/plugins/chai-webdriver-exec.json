{"_id":"chai-webdriver-exec","_rev":"1-f3395278646b4c22b56b95e032217a36","name":"chai-webdriver-exec","description":"Chai plugin for asserting executed scripts with selenium-webdriver","dist-tags":{"latest":"1.0.0"},"versions":{"1.0.0":{"name":"chai-webdriver-exec","version":"1.0.0","description":"Chai plugin for asserting executed scripts with selenium-webdriver","main":"index.js","scripts":{"test":"gulp"},"repository":{"type":"git","url":"git+https://github.com/clns/chai-webdriver-exec.git"},"keywords":["chai","webdriver","selenium","chai-plugin","executeScript","exec"],"author":{"name":"Calin Seciu"},"license":"MIT","bugs":{"url":"https://github.com/clns/chai-webdriver-exec/issues"},"homepage":"https://github.com/clns/chai-webdriver-exec#readme","dependencies":{"chai":"^3","selenium-webdriver":"^2"},"devDependencies":{"gulp":"^3.9.1","gulp-mocha":"^2.2.0","mocha":"^2.4.5"},"engines":{"node":">=4.0.0"},"gitHead":"285afad25375333be5c17de1e9a83daa29e9729f","_id":"chai-webdriver-exec@1.0.0","_shasum":"2d69801cc2eb4102f4bb3fa29c71be4267132b63","_from":".","_npmVersion":"3.7.3","_nodeVersion":"5.9.1","_npmUser":{"name":"clns","email":"calin@softped.com"},"dist":{"shasum":"2d69801cc2eb4102f4bb3fa29c71be4267132b63","tarball":"https://registry.npmjs.org/chai-webdriver-exec/-/chai-webdriver-exec-1.0.0.tgz"},"maintainers":[{"name":"clns","email":"calin@softped.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/chai-webdriver-exec-1.0.0.tgz_1459157774579_0.5093471053987741"},"directories":{}}},"readme":"# chai-webdriver-exec [![Build Status](https://travis-ci.org/clns/chai-webdriver-exec.svg?branch=master)](https://travis-ci.org/clns/chai-webdriver-exec)\n\nProvides [selenium-webdriver](https://npmjs.org/package/selenium-webdriver) support for asserting executed scripts in [Chai](http://chaijs.com/). This plugin is complementary to the [chai-webdriver](http://chaijs.com/plugins/chai-webdriver/) plugin which only adds support for dom-based assertions.\n\n## Assertions\n\nAll assertions use an `exec` mechanism and work with `chai.expect()`:\n\n```js\nchai.expect('return document.childElementCount').exec.to.equal(1)\nchai.expect('return document.childElementCount').exec.to.exist\n```\n\nThe script to be executed is the first argument to `chai.expect()` and will be passed to [executeScript()](http://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/lib/webdriver_exports_WebDriver.html#executeScript). For the assertion to work the script must have a return value.\n\nFor a list of possible assertions see the [test file](test/main.js). Basically [all BDD assertions](http://chaijs.com/api/bdd/) are supported except: [`arguments`](http://chaijs.com/api/bdd/#arguments), [`itself`](http://chaijs.com/api/bdd/#itself), [`extensible`](http://chaijs.com/api/bdd/#extensible), [`sealed`](http://chaijs.com/api/bdd/#sealed), [`frozen`](http://chaijs.com/api/bdd/#frozen), [`throw`](http://chaijs.com/api/bdd/#method_throw), [`respondTo`](http://chaijs.com/api/bdd/#method_respondto), [`change`](http://chaijs.com/api/bdd/#method_change), [`increase`](http://chaijs.com/api/bdd/#method_increase), [`decrease`](http://chaijs.com/api/bdd/#method_decrease) (due to the nature of executing a script remotely).\n\n### Asynchronous flow\n\nAll these assertions are presumed to be asynchronous (using selenium-webdriver's promise chain). They can all take callbacks, or be chained with promises. For example:\n\n```js\nexpect(script).exec.to.have.ownProperty('string', function(){...})\nexpect(script).exec.to.have.ownProperty('string').then(function(){...})\n```\n\nNote that this usage is not required if using the [selenium-webdriver/testing](http://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/testing/index.html) wrappers.\n\n## Usage\n\n```sh\nnpm i --save-dev chai-webdriver-exec\n```\n\nand then in your test file:\n\n```js\nvar chaiWebdriverExec = require('chai-webdriver-exec')\nchai.use(chaiWebdriverExec(driver))\n```\n\n### Example\n\n```js\nvar webdriver = require('selenium-webdriver'),\n  test = require('selenium-webdriver/testing')\nvar driver = new webdriver.Builder()\n  .forBrowser('firefox')\n  .build()\n\nvar chai = require('chai')\nvar chaiWebdriverExec = require('chai-webdriver-exec')\nchai.use(chaiWebdriverExec(driver)) // here you hook it up\n\ntest.describe('some cool feature', function() {\n  this.timeout(10000)\n  \n  test.it('should work as expected', function() {\n    driver.get('http://github.com');\n    chai.expect('return window.scrollX').to.be.a('number')\n  })\n})\n```\n\n## Tests\n\n```sh\nnpm test\n```\n","maintainers":[{"name":"clns","email":"calin@softped.com"}],"time":{"modified":"2016-03-28T09:36:15.517Z","created":"2016-03-28T09:36:15.517Z","1.0.0":"2016-03-28T09:36:15.517Z"},"homepage":"https://github.com/clns/chai-webdriver-exec#readme","keywords":["chai","webdriver","selenium","chai-plugin","executeScript","exec"],"repository":{"type":"git","url":"git+https://github.com/clns/chai-webdriver-exec.git"},"author":{"name":"Calin Seciu"},"bugs":{"url":"https://github.com/clns/chai-webdriver-exec/issues"},"license":"MIT","readmeFilename":"README.md","_attachments":{}}